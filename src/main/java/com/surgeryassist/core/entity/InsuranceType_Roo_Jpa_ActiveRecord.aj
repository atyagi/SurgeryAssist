// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.surgeryassist.core.entity;

import com.surgeryassist.core.entity.InsuranceType;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import org.springframework.transaction.annotation.Transactional;

privileged aspect InsuranceType_Roo_Jpa_ActiveRecord {
    
    @PersistenceContext
    transient EntityManager InsuranceType.entityManager;
    
    public static final EntityManager InsuranceType.entityManager() {
        EntityManager em = new InsuranceType().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long InsuranceType.countInsuranceTypes() {
        return entityManager().createQuery("SELECT COUNT(o) FROM InsuranceType o", Long.class).getSingleResult();
    }
    
    public static List<InsuranceType> InsuranceType.findAllInsuranceTypes() {
        return entityManager().createQuery("SELECT o FROM InsuranceType o", InsuranceType.class).getResultList();
    }
    
    public static InsuranceType InsuranceType.findInsuranceType(Integer insuranceID) {
        if (insuranceID == null) return null;
        return entityManager().find(InsuranceType.class, insuranceID);
    }
    
    public static List<InsuranceType> InsuranceType.findInsuranceTypeEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM InsuranceType o", InsuranceType.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    @Transactional
    public void InsuranceType.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void InsuranceType.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            InsuranceType attached = InsuranceType.findInsuranceType(this.insuranceID);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void InsuranceType.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void InsuranceType.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public InsuranceType InsuranceType.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        InsuranceType merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
}
