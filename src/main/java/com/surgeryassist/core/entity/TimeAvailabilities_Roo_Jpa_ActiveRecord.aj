// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.surgeryassist.core.entity;

import com.surgeryassist.core.entity.TimeAvailabilities;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import org.springframework.transaction.annotation.Transactional;

privileged aspect TimeAvailabilities_Roo_Jpa_ActiveRecord {
    
    @PersistenceContext
    transient EntityManager TimeAvailabilities.entityManager;
    
    public static final EntityManager TimeAvailabilities.entityManager() {
        EntityManager em = new TimeAvailabilities().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long TimeAvailabilities.countTimeAvailabilitieses() {
        return entityManager().createQuery("SELECT COUNT(o) FROM TimeAvailabilities o", Long.class).getSingleResult();
    }
    
    public static List<TimeAvailabilities> TimeAvailabilities.findAllTimeAvailabilitieses() {
        return entityManager().createQuery("SELECT o FROM TimeAvailabilities o", TimeAvailabilities.class).getResultList();
    }
    
    public static TimeAvailabilities TimeAvailabilities.findTimeAvailabilities(Integer timeAvailabilityID) {
        if (timeAvailabilityID == null) return null;
        return entityManager().find(TimeAvailabilities.class, timeAvailabilityID);
    }
    
    public static List<TimeAvailabilities> TimeAvailabilities.findTimeAvailabilitiesEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM TimeAvailabilities o", TimeAvailabilities.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    @Transactional
    public void TimeAvailabilities.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void TimeAvailabilities.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            TimeAvailabilities attached = TimeAvailabilities.findTimeAvailabilities(this.timeAvailabilityID);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void TimeAvailabilities.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void TimeAvailabilities.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public TimeAvailabilities TimeAvailabilities.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        TimeAvailabilities merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
}
