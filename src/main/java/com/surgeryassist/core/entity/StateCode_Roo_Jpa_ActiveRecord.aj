// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.surgeryassist.core.entity;

import com.surgeryassist.core.entity.StateCode;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import org.springframework.transaction.annotation.Transactional;

privileged aspect StateCode_Roo_Jpa_ActiveRecord {
    
    @PersistenceContext
    transient EntityManager StateCode.entityManager;
    
    public static final EntityManager StateCode.entityManager() {
        EntityManager em = new StateCode().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long StateCode.countStateCodes() {
        return entityManager().createQuery("SELECT COUNT(o) FROM StateCode o", Long.class).getSingleResult();
    }
    
    public static List<StateCode> StateCode.findAllStateCodes() {
        return entityManager().createQuery("SELECT o FROM StateCode o", StateCode.class).getResultList();
    }
    
    public static StateCode StateCode.findStateCode(String stateCodeID) {
        if (stateCodeID == null || stateCodeID.length() == 0) return null;
        return entityManager().find(StateCode.class, stateCodeID);
    }
    
    public static List<StateCode> StateCode.findStateCodeEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM StateCode o", StateCode.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    @Transactional
    public void StateCode.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void StateCode.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            StateCode attached = StateCode.findStateCode(this.stateCodeID);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void StateCode.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void StateCode.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public StateCode StateCode.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        StateCode merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
}
